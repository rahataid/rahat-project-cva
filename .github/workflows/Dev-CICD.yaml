name: Dev CI/CD
on:
  push:
    branches:
      - 'dev'
  pull_request:
    branches:
      - 'dev'
  workflow_dispatch:

env:
  CI: false
  env_npmrc: ${{ secrets.ENV_NPMRC }}

jobs:
  deploy:
    name: build && push image to Docker hub
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'action') || contains(github.event.pull_request.title, 'action') || github.event_name == 'workflow_dispatch'

    steps:
      - uses: actions/checkout@v4

      - name: import env file
        run: |
          touch ./.npmrc && echo "$env_npmrc" >> ./.npmrc

      - uses: actions/setup-node@v3
        with:
          node-version: 20.10.0
    
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 8.14.1
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install     

      - uses: actions/cache@v4
        name: Setup NX cache
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-cache-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-nx-cache-

      - name: install dependencies and build apps
        run: |
          pnpm build:all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # cva Image
      - name: build && push cva
        id: build-push-cva
        uses: docker/build-push-action@v5
        with:
          context: .
          cache-from: type=gha,scope=${{ github.ref_name }}-cva
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-cva
          file: Dockerfile.cva
          push: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
          tags: esatya/rahat-project-cva:dev
